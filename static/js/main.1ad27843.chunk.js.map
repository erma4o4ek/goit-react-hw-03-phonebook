{"version":3,"sources":["components/ContactFilter/ContactFilter.module.css","components/ContactForm/ContactForm.module.css","components/ContactFilter/ContactFilter.jsx","components/ContactForm/ContactForm.jsx","components/ContactList/ContactList.jsx","App.js","index.js"],"names":["module","exports","ContactFilter","value","onChangeFilter","className","style","filterLabel","input","type","onChange","e","target","ContactForm","state","name","number","nameInputId","shortid","generate","numberInputId","handleChange","currentTarget","setState","handleSubmit","preventDefault","props","onAddContact","form","onSubmit","this","label","htmlFor","id","pattern","title","required","button","Component","ContactList","contacts","onDeleteContact","map","onClick","App","filter","addContact","contact","find","alert","deleteContact","contactId","prevState","changeFilter","getVisibleContacts","toLowerCase","includes","localStorage","getItem","parsedContacts","JSON","parse","prevProps","setItem","stringify","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.1ad27843.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"filterLabel\":\"ContactFilter_filterLabel__2GONy\",\"input\":\"ContactFilter_input__3rFD2\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"ContactForm_form__3QY8P\",\"label\":\"ContactForm_label__1T6X-\",\"input\":\"ContactForm_input__3LIfe\",\"button\":\"ContactForm_button__fgBqw\"};","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport style from \"../ContactFilter/ContactFilter.module.css\";\r\n\r\nconst ContactFilter = ({value, onChangeFilter }) => (\r\n  <label className={style.filterLabel}>\r\n    Find contacts by name\r\n    <input\r\n      className={style.input}\r\n      type=\"text\"\r\n      value={value}\r\n      onChange={(e) => onChangeFilter(e.target.value)}\r\n    />\r\n  </label>\r\n);\r\n\r\nContactFilter.propTypes = {\r\n  value: PropTypes.string.isRequired,\r\n  onChangeFilter: PropTypes.func.isRequired,\r\n};\r\nexport default ContactFilter;\r\n","import React, { Component } from 'react';\r\nimport PropTypes from \"prop-types\";\r\nimport style from \"../ContactForm/ContactForm.module.css\";\r\nimport shortid from 'shortid';\r\n\r\nclass ContactForm extends Component {\r\nstate = {\r\n  name: '',\r\n  number: ''\r\n}\r\n\r\nnameInputId = shortid.generate();\r\nnumberInputId = shortid.generate();\r\n\r\nhandleChange = e => {\r\n  const {name, value} = e.currentTarget;\r\n  this.setState({\r\n    [name]: value\r\n  });\r\n};\r\n\r\nhandleSubmit = (e) => {\r\n  e.preventDefault();\r\n  this.props.onAddContact({ ...this.state });\r\n  this.setState({ name: \"\", number: \"\" });\r\n};\r\n\r\nrender() {\r\n  return (\r\n  <form className={style.form} onSubmit={this.handleSubmit}>\r\n    <label className={style.label} htmlFor={this.nameInputId}>\r\n      Name\r\n      <input\r\n        className={style.input}\r\n        type=\"text\"\r\n        name=\"name\"\r\n        value={this.state.name}\r\n        onChange={this.handleChange}\r\n        id={this.nameInputId}\r\n        pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n        title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n        required\r\n      />\r\n    </label>\r\n    <label className={style.label} htmlFor={this.numberInputId}>\r\n      Number\r\n      <input\r\n        className={style.input}\r\n        type=\"tel\"\r\n        name=\"number\"\r\n        value={this.state.number}\r\n        onChange={this.handleChange}\r\n        id={this.numberInputId}\r\n        pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\r\n        title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\r\n        required\r\n      />\r\n    </label>\r\n    \r\n    <button className={style.button} type='submit'>\r\n      Add contact\r\n    </button>\r\n  </form>)\r\n}\r\n}\r\n\r\nContactForm.propTypes = {\r\n  onSubmit: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default ContactForm;\r\n\r\n\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\n\r\nconst ContactList = ({ contacts, onDeleteContact }) => {\r\n  return (\r\n    <ul className=\"contact-list\">\r\n      {contacts.map(({ name, id, number }) => {\r\n        return (\r\n          <li className=\"contact-item\" key={id}>\r\n            {name}: {number}\r\n            <button\r\n              className=\"contact-item-button\"\r\n              onClick={() => onDeleteContact(id)}\r\n            >\r\n              delete\r\n            </button>\r\n          </li>\r\n        );\r\n      })}\r\n    </ul>\r\n  );\r\n}\r\n\r\nContactList.propTypes = {\r\n  onDeleteContact: PropTypes.func.isRequired,\r\n  contacts: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      id: PropTypes.string.isRequired,\r\n      name: PropTypes.string.isRequired,\r\n      number: PropTypes.string.isRequired,\r\n    })\r\n  ),\r\n};\r\n\r\nexport default ContactList;\r\n","import React, { Component } from \"react\";\nimport ContactFilter from './components/ContactFilter/ContactFilter';\nimport ContactForm from './components/ContactForm/ContactForm';\nimport ContactList from './components/ContactList/ContactList';\nimport shortid from 'shortid';\n\nexport default class App extends Component {\n  state = {\n    contacts: [\n      { id: \"id-1\", name: \"Rosie Simpson\", number: \"459-12-56\" },\n      { id: \"id-2\", name: \"Hermione Kline\", number: \"443-89-12\" },\n      { id: \"id-3\", name: \"Eden Clements\", number: \"645-17-79\" },\n      { id: \"id-4\", name: \"Annie Copeland\", number: \"227-91-26\" },\n    ],\n    filter: \"\",\n  }\n\n  componentDidMount() {\n    const contacts = localStorage.getItem(\"contacts\");\n    const parsedContacts = JSON.parse(contacts);\n    if (parsedContacts) {\n      this.setState({ contacts: parsedContacts });\n    }\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if (this.state.contacts !== prevState.contacts) {\n      localStorage.setItem(\"contacts\", JSON.stringify(this.state.contacts));\n    }\n  }\n\n  addContact = ({ name, number }) => {\n    const contact = {\n      id: shortid.generate(),\n      name,\n      number,\n    };\n    if (this.state.contacts.find(contact => contact.name === name)) {\n      alert(\"This contact is already on the list\");\n      return;\n    }\n    this.setState(({ contacts }) => ({\n      contacts: [contact, ...contacts],\n    }));\n  };\n\n  deleteContact = contactId => {\n    this.setState(prevState => ({\n      contacts: prevState.contacts.filter(contact => contact.id !== contactId),\n    }));\n  };\n\n  changeFilter = (filter) => {\n    this.setState({ filter});\n  };\n\n  getVisibleContacts = () => {\n    const { contacts, filter } = this.state;\n\n    return contacts.filter((contacts) =>\n      contacts.name.toLowerCase().includes(filter.toLowerCase())\n    );\n  };\n\n  render() {\n    const { name, filter } = this.state;\n    const getVisibleContacts = this.getVisibleContacts();\n\n    return (\n      <div>\n        <h1>Phonebook</h1>\n        <ContactForm value={name} onAddContact={this.addContact} />\n        <h2>Contacts</h2>\n        <ContactFilter value={filter} onChangeFilter={this.changeFilter} />\n        <ContactList \n        contacts={getVisibleContacts} \n        onDeleteContact={this.deleteContact} />\n      </div>\n    );\n  }\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles.css';\nimport App from './App';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\n"],"sourceRoot":""}